generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String
  forms    Form[]
  
  @@map("users")
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  token       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sections    Section[]
  submissions FormSubmission[]
  
  @@map("forms")
}

model Section {
  id          String  @id @default(cuid())
  title       String
  description String?
  order       Int
  
  formId   String
  form     Form    @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  fields   Field[]
  
  @@map("sections")
}

model Field {
  id          String    @id @default(cuid())
  label       String
  type        FieldType
  required    Boolean   @default(false)
  order       Int
  
  sectionId   String
  section     Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  responses   FieldResponse[]
  
  @@map("fields")
}

model FormSubmission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  responses FieldResponse[]
  
  @@map("form_submissions")
}

model FieldResponse {
  id       String @id @default(cuid())
  value    String
  
  fieldId  String
  field    Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  submissionId String
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  
  @@map("field_responses")
}

enum FieldType {
  TEXT
  NUMBER
}
